CFLAGS="$CFLAGS -I$SAGE_LOCAL/include -g"

COMPILER=`testcc.sh $CC`

if [ "$COMPILER"  = "GCC" ] ; then
   CFLAGS="$CFLAGS -fPIC -Wall -pedantic"
elif [ "$COMPILER" = "Sun_Studio" ] ; then
   CFLAGS="$CFLAGS -Kpic"
elif [ "$COMPILER" = "HP_on_HP-UX" ] ; then
   CFLAGS="$CFLAGS + z"
fi

# m4ri has some existing support for Windows, but it assumes that you're
# building for Windows using MSVC, so it uses the presence of _MSC_VER
# to determine if compiling for Windows
if [ -n "$MSYSTEM" ]; then
   CFLAGS="$CFLAGS -D_MSC_VER"
fi

if [ "x$SAGE_DEBUG" = "xyes" ]; then
   ENABLE_DEBUG="--enable-debug"
else
   ENABLE_DEBUG=""
fi

export CFLAGS

# m4ri's cpuid detection breaks on Windows because it tries to determine if we're running on Windows
# using `sizeof(long) == 8`, but Windows sets sizeof(long) to 4 even for 64-bit
# 
# Work around that by disabling SSE2 (which causes the cpuid detection to get skipped) when building
# in MSYS
if [ "x$SAGE_FAT_BINARY" = "xyes" ] || [ -n "$MSYSTEM" ]; then
    DISABLE_SSE2="--disable-sse2"
else
    DISABLE_SSE2=""
fi

# otherwise we might run into problems with old headers
rm -rf "$SAGE_LOCAL/include/m4ri"

cd src

# Configure and build M4RI
sdh_configure --enable-shared --disable-static $ENABLE_DEBUG $DISABLE_SSE2
sdh_make
sdh_make_install
