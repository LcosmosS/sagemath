#!/usr/bin/env bash
# From sage-spkg.
# For type=script packages, the build rule in build/make/Makefile sources
# sage-env but not sage-dist-helpers.
lib="$SAGE_ROOT/build/bin/sage-dist-helpers"
source "$lib"
if [ $? -ne 0 ]; then
    echo >&2 "Error: failed to source $lib"
    echo >&2 "Is $SAGE_ROOT the correct SAGE_ROOT?"
    exit 1
fi
cd src

export PIP_NO_INDEX=true

if [ -r vendor.txt ]; then
    export PIP_FIND_LINKS="file://$SAGE_DISTFILES"
    vendoring sync
fi

export PIP_FIND_LINKS="file://$SAGE_SPKG_WHEELS"

unset tox_args

if [ "$SAGE_EDITABLE" = yes ]; then
    tox_envs=$(tox -l | sed s/norequirements/editable/)
    # FIXME: Should use -r if sage_setup or another build requirement changes
    tox_args="-r -v -v -v -v -e $(echo $tox_envs | sed 's/ /,/g')"
    if [ "$SAGE_CHECK" = no ]; then
        tox_args="$tox_args --notest"
    fi
fi

if [ "$SAGE_WHEELS" = yes ]; then
    rm -Rf build
    # First build the sdist, then build the wheel from the sdist.
    # https://pypa-build.readthedocs.io/en/latest/#python--m-build
    # This makes sure that the sdist is complete.
    DIST_DIR="$(mktemp -d)"
    python3 -m build --outdir "$DIST_DIR"/dist . || sdh_die "Failure building sdist and wheel"
    ls -l "$DIST_DIR"/dist/*.tar.gz
    if [ "$SAGE_EDITABLE" = yes ]; then
        # Do not install the wheel
        wheel=$(cd "$DIST_DIR" && sdh_store_wheel . >&2 && echo $wheel)
    else
        wheel=$(cd "$DIST_DIR" && sdh_store_and_pip_install_wheel . >&2 && echo $wheel)
    fi
    ls -l "$wheel"
    if [ "$SAGE_CHECK" != no ]; then
        tox_envs=$(tox -l)
        tox_args="-r -p auto -v --installpkg $wheel"
    fi
fi

if [ -n "$tox_args" ]; then
    export TOX_PARALLEL_NO_SPINNER=1
    if [ ! -r tox.ini ]; then
        echo "Not testing the package because there is no tox.ini"
        exit 0
    fi
    echo Running "tox $tox_args"
    tox $tox_args
    status=$?
    case $status:$SAGE_CHECK:$([ -r known-test-failures.json ]; echo $?) in
        0:no:*)   echo "Not testing the package because SAGE_CHECK=no";;
        0:*:0)    echo "Passed the test suite (modulo baseline known-test-failures*.json)";;
        0:*:*)    echo "Passed the test suite";;
        *:warn:0) echo "Warning: New failures (not in baseline known-test-failures*.json (ignored)"; status=0;;
        *:warn:*) echo "Warning: Failures testing the package (ignored)"; status=0;;
        *:yes:0)  echo "New failures, not in baseline known-test-failures*.json";;
        *:yes:*)  echo "Failures testing the package";;
    esac
    # Show summaries of failures (suppress lines ending with '[failed in baseline]')
    for e in $tox_envs; do
        for f in $(pwd)/.tox/$e/log/*-command*.log; do
            if [ -r "$f" ]; then
                echo "$f"
                grep '^sage -t.*#[^]]*$' "$f"
            fi
        done
    done
    exit $status
fi
