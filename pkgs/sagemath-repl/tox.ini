# To build and test in the tox environment:
#
# ./sage -sh -c '(cd pkgs/sagemath-repl && tox -v -v)'
#
# To test interactively:
#
# pkgs/sagemath-repl/.tox/python/bin/python
#
[tox]
envlist =
    sagepython-norequirements

isolated_build = True

[testenv]
deps = -rrequirements.txt

passenv =
    # Variables set by .homebrew-build-env
                             CPATH
                             LIBRARY_PATH
                             PKG_CONFIG_PATH
    # Parallel build
                             SAGE_NUM_THREADS
    # SAGE_VENV only for finding the wheels
    sagewheels:              SAGE_VENV
    # Location of the wheels
    sagewheels:              SAGE_SPKG_WHEELS

setenv =
    # Sage scripts such as sage-runtests like to use $HOME/.sage
    HOME={envdir}
    # We supply pip options by environment variables so that they
    # apply both to the installation of the dependencies and of the package
    sagewheels:              PIP_FIND_LINKS=file://{env:SAGE_SPKG_WHEELS:{env:SAGE_VENV:{toxinidir}/../../../../venv}/var/lib/sage/wheels}
    nopypi:                  PIP_NO_INDEX=true

whitelist_externals =
    bash

commands =
    # Beware of the treacherous non-src layout. "./sage/" shadows the installed sage package.
    python -c 'import sys; "" in sys.path and sys.path.remove(""); import sage.repl.all; import sage.doctest.all'

    bash -c 'cd bin && SAGE_SRC=$(python -c "from sage.env import SAGE_SRC; print(SAGE_SRC)") && sage-runtests --environment=sage.all__sagemath_repl --optional=sage $SAGE_SRC/sage/repl $SAGE_SRC/sage/doctest $SAGE_SRC/sage/misc/sage_input.py $SAGE_SRC/sage/misc/sage_eval.py || echo "(lots of doctest failures are expected)"'

[testenv:sagepython]
passenv =
    SAGE_VENV

basepython = {env:SAGE_VENV}/bin/python3
