Sage [1]_是一个免费的、开源的数学软件系统，采用 GPL 开源协议发布。它整合了
许多开源 Python [2]_包，并采用 Python 语言编写，但也支持其他语言。它的目标是创
造一个强大的开源数学软件，以作为 Magma、Maple、Mathematica 和 Matlab 等商业数学软件的优秀开源解决方案。Sage 不仅
是一个软件，同时也是一个编程环境，它提供命令行模式和笔记本模式，可以编写编译型程序和解释型程序。Sage 是目前功能
最强大，集成度最高的开源数学软件，正是因为如此，才诞生两年的 Sage 就赢得自由软件的国际竞争中科学软件部分的 Les
Trophées du Libre 首奖。更多关于 Sage 的介绍可以从官方文档中获得。

本文档的英文版本由 Sage 开发组编写，属于官方文档的一部分，国内也有爱好者翻译过早期版本，但排版不是很好，也有少
许细节不太清楚，故利用业余时间重新翻译并用 LaTeX 进行重新排版，并加入了自己的一些见解。因为本文档很简短，所
以，本文档在与官方保持更新的同时，我还会逐渐加入自己在学习 Sage 过程中的个人经验，希望能把该文档写成一个入门级
的教程，并随官方文档一起发布。更希望读者对本文档提出宝贵的意见和建议，使该文档成为 Sage 初学者的首选教程。

最后需要声明的是，本文档遵循\ *Creative Commons Attribution-Share Alike
3.0 License*  [3]_发布，您可以复制、传播并
加以修改，详情请阅读相关内容。

创建 Sage 学习环境
==================

学习 Sage 要做的第一件事，就是要创建 Sage 学习环境。本章将详细介绍如何进行 Sage 学习环境的创建，但不包括从
源码编译 Sage 方面的内容，因为这对于初学者是一个比较棘手的事情，即使从源码编译也并不是一件很难的事情。

概述
----

Sage 能够在多种计算机操作系统下进行安装，如 Windows（4.8 及以前的版本还只能通过虚拟机使用）、Mac
OS 和
Linux（以 Ubuntu 为例），你甚至可以在线使用 Sage，前提是你的网速足够快。另外，相对于 Windows，在 Ubnutu 
和 Mac
OS 下进行安装时的操作更为方便，而且运行起来更加流畅，因此笔者强烈建议用户在 Ubuntu 或 Mac
OS 下学习
使用 Sage 。在讲解 Ubuntu 下的 Sage 安装时，笔者以 Ubuntu-11.10 为平台进行讲解，而非官方二进制安装包编译平
台 Ubuntu-10.04-LTS 。关于 Mac
OS 下的 Sage 安装，笔者未经实践，所以仅供参考。

Ubuntu 下创建 Sage 学习环境
---------------------------

下载二进制安装包
~~~~~~~~~~~~~~~~

到 Sage 官网的 \ **Download** 链接下载与 Ubuntu 系统对应的 Sage 版本，特别需要注意的是：如果你的操作系统
是32位的，那么就下载对应32位操作系统的 Sage 版本，64位亦是如此。例如，笔者使用的 Ubuntu 系统是32位的，那么我
下载的 Sage 二进制安装包的全名是这样的：\ ``sage-4.8-linux-32bit-ubuntu_10.04_lts-i686-Linux.tar.lzma`` 。

解压进行安装
~~~~~~~~~~~~

可先将下载来的 Sage 二进制安装包移动到用户主文件夹下，然后将其解压至此。解压的方法有两种：一是，单击 Sage 二
进制安装包，点击鼠标右键，选择“将文件解压至此”；二是，在终端输入：\ ``tar --lzma -xvf filename`` ，其中的
``filename`` 需用 Sage 二进制安装包的全名替换掉。如果你想从键盘输入较少的字符，或是怕输入错误字符，那么你
可以将 Sage 二进制安装包文件名改为：\ ``sage-4.8.tar.lzma`` 后，再输入命令，或者干脆复制粘贴文件名。

运行 Sage
~~~~~~~~~

| 不管你用那种方式进行解压，你都将得到一个名为：\ ``sage-4.8-linux-32bit-ubuntu_``
| ``10.04_lts-i686-Linux`` 的文件夹。
| 此时，我们已经可以通过终端运行 Sage 了。但为了方便，此处将解压得到的文件夹名更改为：\ ``sage-4.8`` 。

打开终端（Ubunut-11.10 下的快捷键为：\ ``Alt+Shift+T``\ ），输入：\ ``cd sage-4.8`` 以进入解压得到的文件夹。然
后再输入：\ ``./sage`` ，等待一小段时间（第一次运行需要重新生成文件），就可以进入 Sage 命令行模式，在该模式
下即可运行 Sage 程序。此时，在命令行中输入：\ ``notebook（）``\ ，即可自动进入 Sage 笔记本模式。

多用户模式
~~~~~~~~~~

虽然通过以上过程，我们已经可以运行 Sage 了，但这只局限于本用户使用。并且，我们不能通过终端一步进入 Sage ，这显得
有点不方便。所以，我们可以将 Sage 设置成多用户模式，这个过程需要以超级用户进行操作。

首先我们将 \ ``sage-4.8`` 文件夹移至 ``/opt`` 目录下，然后在 ``/usr/bin`` 下创建指向 Sage 实际所在位置的符
号链接。打开终端输入：\ ``sudo mv sage-4.8 /opt`` （注意：斜杠前面有一个空格），系统提示输入超级用户密码，输入即
可，大约20秒后，\ ``sage-4.8`` 文件夹将被移至 ``/opt`` 目录下。当你看到主目录下的 ``sage-4.8`` 文件夹消失了，
就说明此过程已完成。然后，在终端输入：\ ``cd /usr/bin`` （注意：斜杠前面有一个空格）以进入 ``/usr/bin`` 目录，
再输入 \ ``sudo ln -s /opt/sage-4.8/sage sage`` ，并在提示后输入超级用户密码完成设置。以后，用户就可以在终端直接
键入：\ ``sage`` 进入 Sage 命令行模式了。但需要提醒的是：如果你想其它用户使用 Sage ，那么第一次运行 Sage 的用户必
须是系统管理员（创建符号链接的用户），因为其它用户没有配置文件的权限。

Mac OS 下创建 Sage 学习环境
---------------------------

下载二进制安装包
~~~~~~~~~~~~~~~~

到 Sage 官网的 \ **Download** 链接下载与 Mac
OS 对应的 Sage 版本，这里仍然需要注意的是：如果你的操作
系统是32位的，那么就下载对应32位操作系统的 Sage 版本，64位亦是如此。而且，对于 Mac
OS ，你还得注意你所使
用的系统版本号需要与你所下载的二进制安装包标明的一致。如果你的系统是的 Mac
OS X 10.5（32-bit Intel） ，
那么你下载的 Sage 二进制安装包的全名应该是这样的：\ ``sage-4.8-osx-32bit-10.5-i386-darwin-app.dmg`` 。

进行安装
~~~~~~~~

双击下载得到的 .dmg 磁盘镜像文件进行加载，把磁盘镜像里的 Sage 文件夹移动到你想要放置的地方（比如：Apps 文件夹）。
如果复制过程发生错误，那么你得通过命令行来完成这步操作。打开终端，输入：\ ``cd /Applications`` ，进入应用软件文件夹。
接着输入：\ ``cp -R -P /Volumes/filename /sage`` ，其中的 ``filename`` 需用 Sage 二进制安装包的全名替换掉。当复制
过程完成后，右击磁盘镜像文件的图标，选择 \ ``Eject`` 卸载该镜像文件。

运行 Sage
~~~~~~~~~

使用 Finder 访问上面建立的 Sage 文件夹，双击名为 \ ``Sage`` 的图标，在正常情况下会打开终端，然后运行 Sage 。如果，双击
不能成功运行的话，右击名为 \ ``Sage`` 的图标，选择 ``Open With -> Terminal.app`` ，此时应该可以在终端启动 Sage 了。

第一次启动 Sage 会等待一小段时间，当 Sage 完成新文件的生成后，就可以进入 Sage 命令行模式，在该模式下即可运行 Sage 程序。
此时，在命令行中输入：\ ``notebook（）``\ ，即可自动进入 Sage 笔记本模式。

Windows 下创建 Sage 学习环境
----------------------------

下载虚拟机文件
~~~~~~~~~~~~~~

到 Sage 官网的 \ **Download** 链接下载与 Windows 系统对应的 Sage 虚拟机文件，对于 ``Sage-4.8`` 版本，你下载得
到的文件全名应该是这样的：\ ``sage-4.8.ova`` 。

下载 VirtualBox 
~~~~~~~~~~~~~~~~

``VirtualBox`` 是一款非常强大并且开源的虚拟机软件，Sage 通过它向外部建立了客户端口，以实现在 Windows 上使用 ``notebook``\ 。
不过，根据 Sage 的开发跟踪，\ ``Sage-5.0`` 将通过 Cygwin 实现直接在 Windows 上进行安装，这在很大程度上减轻了在 Windows 上运行 Sage 
的一些麻烦。闲话少说，访问：\ https://www.virtualbox.org/wiki/Downloads\ ，下载与你的操作系统对应的 \ ``VirtualBox`` 版本。

安装与运行 Sage
~~~~~~~~~~~~~~~

先安装\ ``VirtualBox``\ ，然后导入下载的 Sage 虚拟机文件。导入完成后，运行建立的虚拟机，即可通过外部端口（\ localhost:8000\ ）使用
 ``notebook``\ （强烈建议使用 Firefox 打开外部端口）。更加详细的安装步骤请参见：\ http://wiki.sagemath.org/SageAppliance 。

把 Sage 用作计算器
==================

Sage 的命令行带有 \ ``sage:``\ 提示符，你并不需要手动进行添加。如果你使用的是 Sage
notebook，那么
将 \ ``sage:``\ 提示符后的全部代码输入一个空的单元，然后按下 \ ``Shift+Enter``\ 来得到输出。

基本四则运算
------------

::

    sage: 3 + 5
    8

幂运算
------

符号\ ``“^”``\ 表示指数：

::

    sage: 57.1^100      # 表示57.1的100次方
    4.60904368661396e175

矩阵运算
--------

在 Sage 中计算一个 \ :math:`2\times2` 矩阵的逆：

::

    sage: matrix([[1,2], [3,4]])^(-1)
    [  -2    1]
    [ 3/2 -1/2]

积分运算
--------

下面我们对一个简单函数进行积分：

::

    sage: x = var('x')   # 创建一个符号变量
    sage: integrate(sqrt(x)*sqrt(1+x),x)
    1/4*((x + 1)^(3/2)/x^(3/2) + sqrt(x + 1)/sqrt(x))/((x + 1)^2/x^2
    - 2*(x + 1)/x + 1) - 1/8*log(sqrt(x + 1)/sqrt(x) + 1)
    + 1/8*log(sqrt(x + 1)/sqrt(x) - 1)


解方程
------

下面用 Sage 求解二次方程，需要说明的是，在 sage 中，\ ``==`` 代表相等。

::

    sage: a = var('a')
    sage: S = solve(x^2 + x == a, x); S
    [x == -1/2*sqrt(4*a + 1) - 1/2, x == 1/2*sqrt(4*a + 1) - 1/2]

上面的结果是一个等式列表。

::

    sage: a = var('a')
    sage: S = solve(x^2 + x == a, x)
    sage: S[0].rhs()        # S[0]代表上例结果中的第一个等式 而函数rhs()返回等式右边的内容
    -1/2*sqrt(4*a + 1) - 1/2

数据可视化
==========

Sage 具有强大的数据可视化功能，能够绘制精美的二维图形及三维图形，并具有交互功能，这是某些商业数学软件都难以达到的水平。

二维绘图
--------

Sage 具有广泛的二维图形绘制函数，既能绘制单个函数图像，也能多图同时绘制，还能在图像任意位置处添加文字或公式。

单个函数图像
~~~~~~~~~~~~

::

    sage: show(plot(sin(x) + sin(1.6*x), (x,0,40), plot_points = 500))

.. image:: sin_plot.*

多个函数图像
~~~~~~~~~~~~

::

    sage: show(sum(circle((i,0), i, hue=sin(i/10)) for i in \
    ....:     [100,99.5,..,0]), aspect_ratio=1,figsize=10)

.. image:: circles_plot.*

三维绘图
--------

Sage 的三维绘图功能也非常强大，而且提供众多控件。

::

    sage: var('x y')
    (x, y)
    sage: plot3d(sin(x^2 + y^2)/(x^2 + y^2), (x,-3,3), (y,-3,3),
    ....:        plot_points=150, color='green')

.. image:: plot_3d.*

交互
----

Sage 的交互函数能进行实时交互。

.. skip

::

    sage: @interact
    ....: def _(a=(1,4), b=(0,10)):
    ....:     show(plot(sin(a*x+b)^2+a*cos(a*x^2), (x,0,6)), figsize=[8.5,3.5])

.. image:: interact_screenshot.*

注意：Sage 的编程语言是 Python，而在 Python 中，空格是具有实际意义的，也就是
说空格在 Sage 中具有实际意义，不能随意进行删减。当不能一行输入完程序时，那么在你
输完一行程序并按下 \ ``Shift+Enter`` 后，光标会自动缩进（比如上例），这时不要改变光标
的位置，直接进行下行的输入。

Sage 强大的数据处理能力
=======================

处理高阶矩阵
------------

首先，我们来创建一个 \ :math:`500\times500` 的随机矩阵：

::

    sage: m = random_matrix(RDF,500)

计算这个矩阵的本征值并将其绘出会花费Sage好几秒的时间。

::

    sage: m = random_matrix(RDF,500)
    sage: e = m.eigenvalues()     # 大约2秒
    sage: w = [(i, abs(e[i])) for i in range(len(e))]
    sage: show(points(w))

.. image:: eigen_plot.*

你所得到的本征值在你所绘制的图形上的分布跟上图很可能不一样，因为生成的矩阵
是随机，具有不确定性。

处理大型数字
------------

得益于 GNU多精度库（GNU Multiprecision
Library，简称：GMP），Sage 能够处理
非常大的数字，即使是成千上万位的数字。

::

    sage: factorial(100)           # 结果太长，不在此显示
    93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000

::

    sage: n = factorial(1000000)   # 大约2.5秒

输出精度达到 100 位有效数字的 \ :math:`\pi` 值：

::

    sage: N(pi,digits = 100)       # 结果太长，不在此显示
    3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068

处理多项式
----------

下面让 Sage 分解含有两个变量的高阶多项式：

::

    sage: R.<x,y> = QQ[]
    sage: F = factor(x^99 + y^99)
    sage: F
    (x + y) * (x^2 - x*y + y^2) * (x^6 - x^3*y^3 + y^6) * (x^10 - x^9*y +
    x^8*y^2 - x^7*y^3 + x^6*y^4 - x^5*y^5 + x^4*y^6 - x^3*y^7 + x^2*y^8 -
    x*y^9 + y^10) * (x^20 + x^19*y - x^17*y^3 - x^16*y^4 + x^14*y^6 +
    x^13*y^7 - x^11*y^9 - x^10*y^10 - x^9*y^11 + x^7*y^13 + x^6*y^14 -
    x^4*y^16 - x^3*y^17 + x*y^19 + y^20) * (x^60 + x^57*y^3 - x^51*y^9 -
    x^48*y^12 + x^42*y^18 + x^39*y^21 - x^33*y^27 - x^30*y^30 - x^27*y^33 +
    x^21*y^39 + x^18*y^42 - x^12*y^48 - x^9*y^51 + x^3*y^57 + y^60)

再将其展开：

::

    sage: R.<x,y> = QQ[]
    sage: F = factor(x^99 + y^99)
    sage: F.expand()
    x^99 + y^99

Sage 仅用不到 5 秒的时间就能计算出一千万分割成多个整数之和的方法总数：

::

    sage: z = Partitions(10^8).cardinality()    # 大约4.5秒
    sage: str(z)[:40]
    '1760517045946249141360373894679135204009'

版本说明
========

2012/02/18
      V4.8，删除原著第三章：从 sage 中获取算法，并加入第二章：数据可视化。

2012/02/23
      V4.8，根据官方发现的错误进行了修改，计划加入 Sage 安装指南。

2012/02/25
      V5.0，新建第一章：创建 Sage 学习环境，并在第二章中加入了微分运算。

2012/03/31
      V5.0，完成第一章：创建 Sage 学习环境，计划将本文档转化成 rst 格式。

.. [1]
   http://www.sagemath.org

.. [2]
   http://www.python.org

.. [3]
   http://creativecommons.org/licenses/by-sa/3.0/

