r"""
Coherent sheaves on projective schemes

EXAMPLES:

We define the Fermat cubic surface in `\PP^2` and examine its structure sheaf::

    sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
    sage: X = P2.subscheme(x^4 + y^4 + z^4)
    sage: sh = X.structure_sheaf()
    sage: sh
    Coherent sheaf on Closed subscheme of Projective Space of dimension 2
     over Rational Field defined by: x^4 + y^4 + z^4
    sage: sh.euler_characteristic()
    -2

AUTHORS:

- Kwankyu Lee (2024-01-22): initial version
"""

from functools import cached_property
from sage.structure.sage_object import SageObject
from sage.structure.unique_representation import UniqueRepresentation
from sage.misc.cachefunc import cached_method
from sage.modules.free_module import FreeModule


class CoherentSheaf(UniqueRepresentation, SageObject):
    r"""
    Coherent sheaf on a projective scheme.

    INPUT:

    - ``scheme`` -- the base scheme on which the sheaf is defined

    - ``module`` -- a free module or its quotient by a submodule

    - ``twist`` -- (default: 0) an integer

    This class constructs the coherent sheaf `\tilde M(n)` if `M` is the
    ``module`` and `n` is the ``twist``.
    """
    def __init__(self, scheme, module, twist=0):
        """
        Initialize ``self``.

        TESTS::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: sheaf = X.structure_sheaf()
            sage: TestSuite(sheaf).run()
        """
        try:
            if module.is_ambient():
                module = module.quotient(module.zero_submodule())
        except AttributeError:
            pass

        assert module.cover() == module.free_cover()

        self._base_scheme = scheme
        self._module = module
        self._twist = twist

    @cached_property
    def _cohomology(self):
        """
        Return an object that computes the cohomology.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: sheaf = X.structure_sheaf()
            sage: c = sheaf._cohomology
            sage: c.cohomology_group(1).dimension()
            3
            sage: c.betti(1)
            3
        """
        raise NotImplementedError('_cohomology is not implemented')

    def _repr_(self):
        """
        Return the string representation of this sheaf.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: s = X.structure_sheaf()
            sage: s
            Coherent sheaf on Closed subscheme of Projective Space of dimension 2
             over Rational Field defined by: x^4 + y^4 + z^4
            sage: s.twist(2)
            Twisted coherent sheaf on Closed subscheme of Projective Space of dimension 2
             over Rational Field defined by: x^4 + y^4 + z^4
        """
        sheaf = 'Twisted coherent sheaf' if self._twist else 'Coherent sheaf'
        return f'{sheaf} on {self._base_scheme}'

    def base_scheme(self):
        """
        Return the base scheme on which this sheaf is defined.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: s = X.structure_sheaf()
            sage: s.base_scheme()
            Closed subscheme of Projective Space of dimension 2 over Rational Field defined by:
              x^4 + y^4 + z^4
        """
        return self._base_scheme

    def defining_twist(self):
        """
        Return the integer by which the module defining this coherent sheaf is
        twisted.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: s = X.structure_sheaf(3)
            sage: s.defining_twist()
            3
        """
        return self._twist

    def defining_module(self):
        """
        Return the module defining this coherent sheaf.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: s = X.structure_sheaf()
            sage: s.defining_module()
            Quotient module by Submodule of Ambient free module of rank 1 over the integral domain Quotient
             of Multivariate Polynomial Ring in x, y, z over Rational Field by the ideal (x^4 + y^4 + z^4)
             Generated by the rows of the matrix:
              []
        """
        return self._module

    def cohomology(self, r=None):
        r"""
        Return the cohomology of ``self``.

        INPUT:

        - ``r`` -- (optional) non-negative integer

        .. SEEALSO::

            :meth:`betti` to get the dimension of the cohomology groups.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: sheaf = X.structure_sheaf()
            sage: sheaf.cohomology(1)
            Vector space quotient V/W of dimension 3 over Rational Field where
            V: Vector space of degree 3 and dimension 3 over Rational Field
            Basis matrix:
            [1 0 0]
            [0 1 0]
            [0 0 1]
            W: Vector space of degree 3 and dimension 0 over Rational Field
            Basis matrix:
            []
            sage: sheaf.cohomology(2)
            Vector space quotient V/W of dimension 0 over Rational Field where
            V: Vector space of dimension 0 over Rational Field
            W: Vector space of degree 0 and dimension 0 over Rational Field
            Basis matrix:
            []

        The rather complicated form (as a quotient of vector spaces) of the
        `r`-th cohomology group ``H(r)`` reflects the internal representation
        of the cohomology group in terms of the cohomology groups of twisted
        structure sheaves of a projective space.

        On the other hand, it is not clear how to represent `H^0(\tilde M)` in
        terms of twisted structure sheaves of a projective space. Hence it is
        merely created as a vector space over `k` with the correct dimension::

            sage: sheaf.cohomology(0)
            Vector space of dimension 1 over Rational Field
        """
        if r is None:
            return self._cohomology
        return self._cohomology.cohomology_group(r)

    def betti(self, r=None):
        r"""
        Return the Betti numbers of ``self``, which are the dimensions
        of the :meth:`cohomology` of ``self``.

        INPUT:

        - ``r`` -- (optional) non-negative integer

        OUTPUT:

        If ``r`` is not given, then this returns all Betti numbers
        `h^0, \ldots, h^d`, where `d` is the dimension of ``self``.
        Otherwise returns the `r`-th Betti number `h^r`.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: sheaf = X.structure_sheaf()
            sage: sheaf.betti(0)
            1
            sage: sheaf.betti(1)
            3
            sage: sheaf.betti(2)
            0
        """
        return self._cohomology.betti(r)

    def twist(self, t=0):
        r"""
        Return the twisted sheaf `F(n)` of this sheaf `F`.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: sh = X.structure_sheaf()
            sage: sh.twist(1).euler_characteristic()
            2
            sage: sh.twist(2).euler_characteristic()
            6

        TESTS::

            sage: sh.defining_twist()
            0
            sage: twisted = sh.twist(1)
            sage: twisted_twisted = twisted.twist(2)
            sage: twisted_twisted.defining_twist()
            3
        """
        return type(self)(self._base_scheme, self._module, self._twist + t)

    def euler_characteristic(self):
        """
        Return the Euler characteristic of this coherent sheaf.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: sh = X.structure_sheaf()
            sage: sh.euler_characteristic()
            -2
        """
        d = self._base_scheme.dimension()
        chi = 0
        for r in range(d + 1):  # for Grothendieck's vanishing theorem
            d = self.betti(r)
            if r % 2:
                chi = chi - d
            else:
                chi = chi + d
        return chi


class CoherentSheaf_on_projective_space(CoherentSheaf):
    r"""
    Coherent sheaf on a projective space.

    EXAMPLES::

        sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
        sage: P2.structure_sheaf()
        Coherent sheaf on Projective Space of dimension 2 over Rational Field
    """
    @cached_property
    def _cohomology(self):
        """
        This property keeps the cohomology object for this sheaf.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: P2.structure_sheaf()._cohomology
            Sheaf cohomology constructed from S(0) <-- 0
        """
        from sage.schemes.projective.cohomology import CoherentSheafCohomology
        return CoherentSheafCohomology(self._module, twist=self._twist)


class CoherentSheaf_on_projective_subscheme(CoherentSheaf):
    r"""
    Coherent sheaf on a projective subscheme.

    EXAMPLES::

        sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
        sage: X = P2.subscheme(x^4 + y^4 + z^4)
        sage: X.structure_sheaf()
        Coherent sheaf on Closed subscheme of Projective Space of dimension 2
         over Rational Field defined by: x^4 + y^4 + z^4
    """
    @cached_property
    def _cohomology(self):
        """
        This property keeps the cohomology object for this sheaf.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: X.structure_sheaf()._cohomology
            Sheaf cohomology constructed from S(0) <-- S(-4) <-- 0
        """
        return self.image_to_ambient_space()._cohomology

    @cached_method
    def image_to_ambient_space(self):
        """
        Return the direct image of this sheaf to the ambient space.

        The image is with respect to the inclusion morphism from the base
        scheme into the projective space.

        EXAMPLES::

            sage: P2.<x,y,z> = ProjectiveSpace(QQ, 2)
            sage: X = P2.subscheme(x^4 + y^4 + z^4)
            sage: X.structure_sheaf().image_to_ambient_space()
            Coherent sheaf on Projective Space of dimension 2 over Rational Field
        """
        X = self._base_scheme
        A = X.ambient_space()
        S = A.coordinate_ring()

        d = self._module.degree()
        M = FreeModule(S, d)
        I = X.defining_polynomials()
        J = self._module.relations().gens()
        gens = M.gens()
        G = [f * g for g in gens for i in range(d) for f in I] + [v.change_ring(S) for v in J]
        N = M.submodule(G)
        return A.coherent_sheaf(M.quotient(N), twist=self._twist)
