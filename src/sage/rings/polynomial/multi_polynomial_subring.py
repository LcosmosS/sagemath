from .multi_polynomial_libsingular import MPolynomialRing_libsingular
from .polynomial_ring_constructor import PolynomialRing

class MPolynomial_subring(MPolynomialRing_libsingular):

    def __init__(self, parent_ring, gens):
        # assert parent ring is immutable ?
        self.parent_ring=parent_ring
        self.generators=gens        
        self.hom=PolynomialRing(parent_ring.base_ring(), len(gens), "a").hom(gens)
        self.I=self.hom.kernel()                                       

    def __repr__(self):
        return f"Subring of {repr(self.parent_ring)} generated by {self.gens()}"

    def gens(self):
        return self.generators
    
    def ngens(self):
        return len(self.generators)
    
    def hilbert_series(self, algorithm="sage"):
        grading=[s.degree() for s in self.generators]
        return self.I.hilbert_series(grading=grading, algorithm=algorithm)
    
    def __contains__(self, other):
        try:
            self.hom.inverse_image(other)
            return True
        except ValueError as e:
            return False
    



