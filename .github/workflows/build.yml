name: Build & Test

on:
  pull_request:
  merge_group:
  push:
    branches:
      - master
      - develop
    # Ignore pushes on tags to prevent two uploads of codecov reports
    tags-ignore: ['**']
  workflow_dispatch:
    # Allow to run manually
    inputs:
      platform:
        description: 'Platform'
        required: true
        default: 'ubuntu-focal-standard'
      docker_tag:
        description: 'Docker tag'
        required: true
        default: 'dev'

concurrency:
  # Cancel previous runs of this workflow for the same branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  get_ci_fixes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Merge CI fixes from sagemath/sage
        run: |
          .ci/merge-fixes.sh
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Store CI fixes in upstream artifact
        run: |
          mkdir -p upstream
          if git format-patch --stdout test_base > ci_fixes.patch; then
            cp ci_fixes.patch upstream/
          fi
      - uses: actions/upload-artifact@v3
        with:
          path: upstream
          name: upstream

  changed_files:
    runs-on: ubuntu-latest
    name: List changed packages
    outputs:
      uninstall_targets: ${{ steps.build-targets.outputs.uninstall_targets }}
      build_targets:     ${{ steps.build-targets.outputs.build_targets }}
    steps:
      - uses: actions/checkout@v4
      - name: Get all packages that have changed
        id: changed-packages
        uses: tj-actions/changed-files@v38
        with:
          files_yaml: |
            configures:
              - 'build/pkgs/*/spkg-configure.m4'
            pkgs:
              - 'build/pkgs/**'
              - 'pkgs/**'
      - name: Determine targets to build
        id: build-targets
        run: |
          echo "uninstall_targets=$(echo $(for a in '' ${{ steps.changed-packages.outputs.configures_all_changed_files }}; do echo $a | sed -E 's,build/pkgs/([_.a-z0-9]*)/spkg-configure[.]m4 *,\1-uninstall,'; done | sort -u))" >> $GITHUB_OUTPUT
          echo "build_targets=$(echo $(for a in '' ${{ steps.changed-packages.outputs.pkgs_all_changed_files }}; do echo $a | sed -E 's,-,_,g;s,(build/)?pkgs/([-_.a-z0-9]*)/[^ ]* *,\2-ensure,;'; done | sort -u))" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    container: ghcr.io/sagemath/sage/sage-${{ github.event.inputs.platform || 'ubuntu-focal-standard' }}-with-targets:${{ github.event.inputs.docker_tag || 'dev'}}
    needs: [get_ci_fixes]
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Update system packages
        id: prepare
        run: |
          export PATH="build/bin:$PATH"
          eval $(sage-print-system-package-command auto update)
          eval $(sage-print-system-package-command auto --spkg --yes --no-install-recommends install git)

      - name: Add prebuilt tree as a worktree
        id: worktree
        run: |
          set -ex
          git config --global --add safe.directory $(pwd)
          .ci/retrofit-worktree.sh worktree-image /sage

      - name: Download upstream artifact
        uses: actions/download-artifact@v3
        with:
          path: upstream
          name: upstream

      - name: Apply CI fixes from sagemath/sage
        # After applying the fixes, make sure all changes are marked as uncommitted changes.
        run: |
          if [ -r upstream/ci_fixes.patch ]; then
            (cd worktree-image && git commit -q -m "current changes" --allow-empty -a && git am; git reset --quiet old; git add -N .) < upstream/ci_fixes.patch
          fi

      - name: Incremental build
        id: incremental
        run: |
          # Now re-bootstrap and build. The build is incremental because we were careful with the timestamps.
          ./bootstrap && make build
        working-directory: ./worktree-image
        env:
          MAKE: make -j2 --output-sync=recurse
          SAGE_NUM_THREADS: 2

      - name: Build modularized distributions
        if: always() && steps.worktree.outcome == 'success'
        run: make V=0 tox && make SAGE_CHECK=no pypi-wheels
        working-directory: ./worktree-image
        env:
          MAKE: make -j2 --output-sync=recurse
          SAGE_NUM_THREADS: 2

      - name: Static code check with pyright
        if: always() && steps.worktree.outcome == 'success'
        run: ./sage -tox -e pyright
        working-directory: ./worktree-image

      - name: Clean (fallback to non-incremental)
        id: clean
        if: always() && steps.worktree.outcome == 'success' && steps.incremental.outcome != 'success'
        run: |
          set -ex
          ./bootstrap && make doc-clean doc-uninstall sagelib-clean && git clean -fx src/sage && ./config.status
        working-directory: ./worktree-image
        env:
          MAKE: make -j2
          SAGE_NUM_THREADS: 2

      - name: Build
        # This step is needed because building the modularized distributions installs some optional packages,
        # so the editable install of sagelib needs to build the corresponding optional extension modules.
        id: build
        if: always() && (steps.incremental.outcome == 'success' || steps.clean.outcome == 'success')
        run: |
          make build
        working-directory: ./worktree-image
        env:
          MAKE: make -j2 --output-sync=recurse
          SAGE_NUM_THREADS: 2

      # Testing

      - name: Test changed files (sage -t --new)
        if: always() && steps.build.outcome == 'success'
        run: |
          # We run tests with "sage -t --new"; this only tests the uncommitted changes.
          ./sage -t --new -p2
        working-directory: ./worktree-image
        env:
          MAKE: make -j2 --output-sync=recurse
          SAGE_NUM_THREADS: 2

      - name: Test modularized distributions
        if: always() && steps.build.outcome == 'success'
        run: make V=0 tox && make pypi-wheels-check
        working-directory: ./worktree-image
        env:
          MAKE: make -j2 --output-sync=recurse
          SAGE_NUM_THREADS: 2

      - name: Pytest
        if: contains(github.ref, 'pytest')
        run: |
          ../sage -python -m pip install coverage pytest-xdist
          ../sage -python -m coverage run -m pytest -c tox.ini --doctest-modules || true
        working-directory: ./worktree-image/src
        env:
          # Increase the length of the lines in the "short summary"
          COLUMNS: 120

      - name: Test all files (sage -t --all --long)
        if: always() && steps.build.outcome == 'success'
        run: |
          ../sage -python -m pip install coverage
          ../sage -python -m coverage run ./bin/sage-runtests --all --long -p2 --random-seed=286735480429121101562228604801325644303
        working-directory: ./worktree-image/src

      - name: Prepare coverage results
        if: always() && steps.build.outcome == 'success'
        run: |
          ./venv/bin/python3 -m coverage combine src/.coverage/
          ./venv/bin/python3 -m coverage xml
          find . -name *coverage*
        working-directory: ./worktree-image

      - name: Upload coverage to codecov
        if: always() && steps.build.outcome == 'success'
        uses: codecov/codecov-action@v3
        with:
          files: ./worktree-image/coverage.xml

  linux-standard:
    needs: [changed_files]
    if: "${{needs.changed_files.outputs.uninstall_targets}}${{needs.changed_files.outputs.build_targets}}"
    uses: ./.github/workflows/docker.yml
    with:
      # Build incrementally from published Docker image
      incremental: true
      free_disk_space: true
      from_docker_repository: ghcr.io/sagemath/sage/
      from_docker_target: "with-targets"
      from_docker_tag: "dev"
      docker_targets: "with-targets"
      targets: "${{needs.changed_files.outputs.uninstall_targets}} ${{needs.changed_files.outputs.build_targets}} build doc-html ptest"
      tox_system_factors: >-
        ["ubuntu-focal", "ubuntu-jammy", "ubuntu-mantic", "debian-bullseye", "debian-bookworm",
         "fedora-30", "fedora-38", "gentoo-python3.11", "debian-bullseye-i386"]
      tox_packages_factors: >-
          ["standard"]
      docker_push_repository: ghcr.io/${{ github.repository }}/
    permissions:
      packages: write

  linux-standard-sitepackages:
    needs: [changed_files]
    if: "${{needs.changed_files.outputs.uninstall_targets}}${{needs.changed_files.outputs.build_targets}}"
    uses: ./.github/workflows/docker.yml
    with:
      # Build incrementally from published Docker image
      incremental: true
      free_disk_space: true
      from_docker_repository: ghcr.io/sagemath/sage/
      from_docker_target: "with-targets"
      from_docker_tag: "dev"
      docker_targets: "with-targets"
      targets: "${{needs.changed_files.outputs.uninstall_targets}} ${{needs.changed_files.outputs.build_targets}} build doc-html ptest"
      # Only test systems with a usable system python (>= 3.9)
      tox_system_factors: >-
        ["ubuntu-jammy", "ubuntu-mantic", "debian-bullseye", "debian-bookworm",
         "fedora-33", "fedora-38", "gentoo-python3.11", "archlinux", "debian-bullseye-i386"]
      tox_packages_factors: >-
          ["standard-sitepackages"]
      docker_push_repository: ghcr.io/${{ github.repository }}/
    permissions:
      packages: write

  linux-minimal:
    needs: [changed_files]
    if: "${{needs.changed_files.outputs.uninstall_targets}}${{needs.changed_files.outputs.build_targets}}"
    uses: ./.github/workflows/docker.yml
    with:
      # Build incrementally from published Docker image
      incremental: true
      free_disk_space: true
      from_docker_repository: ghcr.io/sagemath/sage/
      from_docker_target: "with-targets"
      from_docker_tag: "dev"
      docker_targets: "with-targets"
      targets: "${{needs.changed_files.outputs.uninstall_targets}} ${{needs.changed_files.outputs.build_targets}} build doc-html ptest"
      tox_system_factors: >-
        ["ubuntu-focal", "ubuntu-jammy", "ubuntu-mantic", "debian-bullseye", "debian-bookworm",
         "fedora-30", "fedora-38", "gentoo-python3.11", "debian-bullseye-i386"]
      tox_packages_factors: >-
          ["minimal"]
      docker_push_repository: ghcr.io/${{ github.repository }}/
    permissions:
      packages: write

  build-docs:
    runs-on: ubuntu-latest
    container: ghcr.io/sagemath/sage/sage-ubuntu-focal-standard-with-targets:dev
    needs: [get_ci_fixes]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update system packages
        run: |
          apt-get update && apt-get install -y git zip

      - name: Add prebuilt tree as a worktree
        id: worktree
        run: |
          git config --global user.email "ci-sage@example.com"
          git config --global user.name "Build & Test workflow"
          git config --global --add safe.directory $(pwd)
          .ci/retrofit-worktree.sh worktree-image /sage
          # Keep track of changes to built HTML
          new_version=$(cat src/VERSION.txt); (cd /sage/local/share/doc/sage/html/en && find . -name "*.html" | xargs sed -i '/class="sidebar-brand-text"/s/Sage [0-9a-z.]* /Sage '$new_version' /'; git init && (echo "*.svg binary"; echo "*.pdf binary") >> .gitattributes && (echo ".buildinfo"; echo '*.inv'; echo '.git*'; echo '*.svg'; echo '*.pdf'; echo '*.png'; echo 'searchindex.js') > .gitignore; git add -A && git commit --quiet -m "old")

      - name: Download upstream artifact
        uses: actions/download-artifact@v3
        with:
          path: upstream
          name: upstream

      - name: Apply CI fixes from sagemath/sage
        # After applying the fixes, make sure all changes are marked as uncommitted changes.
        run: |
          if [ -r upstream/ci_fixes.patch ]; then
            (cd worktree-image && git commit -q -m "current changes" --allow-empty -a && git am; git reset --quiet old; git add -N .) < upstream/ci_fixes.patch
          fi

      - name: Incremental build
        id: incremental
        run: |
          # Now re-bootstrap and build. The build is incremental because we were careful with the timestamps.
          ./bootstrap && make build
        working-directory: ./worktree-image
        env:
          MAKE: make -j2 --output-sync=recurse
          SAGE_NUM_THREADS: 2

      - name: Build (fallback to non-incremental)
        id: build
        if: always() && steps.worktree.outcome == 'success' && steps.incremental.outcome != 'success'
        run: |
          set -ex
          make doc-clean doc-uninstall sagelib-clean && git clean -fx src/sage && ./config.status && make build
        working-directory: ./worktree-image
        env:
          MAKE: make -j2 --output-sync=recurse
          SAGE_NUM_THREADS: 2

      - name: Build docs
        id: docbuild
        if: always() && (steps.incremental.outcome == 'success' || steps.build.outcome == 'success')
        # Always non-incremental because of the concern that
        # incremental docbuild may introduce broken links (inter-file references) though build succeeds
        run: |
          set -ex
          export SAGE_USE_CDNS=yes
          mv /sage/local/share/doc/sage/html/en/.git /sage/.git-doc
          make doc-clean doc-uninstall sagelib-clean && git clean -fx src/sage
          mkdir -p /sage/local/share/doc/sage/html/en/ && mv /sage/.git-doc /sage/local/share/doc/sage/html/en/.git
          ./config.status && make doc-html
        working-directory: ./worktree-image
        env:
          MAKE: make -j2 --output-sync=recurse
          SAGE_NUM_THREADS: 2

      - name: Copy docs
        id: copy
        if: always() && steps.docbuild.outcome == 'success'
        run: |
          set -ex
          mkdir -p ./docs
          # Create changelog
          echo '## Preview of CHANGES.html'
          (cd /sage/local/share/doc/sage/html/en && git diff --name-only) | tee ./docs/CHANGES.txt
          (cd /sage/local/share/doc/sage/html/en && git diff; rm -rf .git) > ./docs/html.diff
          echo '## Preview of html.diff'; head -n 400 ./docs/html.diff
          (echo '<p><a href="html.diff">HTML diff</a>'; sed -E 's,(.*),<p><a href="\1">\1</a>,' ./docs/CHANGES.txt) > ./docs/CHANGES.html
          # For some reason the deploy step below cannot find /sage/...
          # So copy everything from there to local folder
          # We also need to replace the symlinks because netlify is not following them
          cp -r -L /sage/local/share/doc/sage/html/en/* ./docs
          # Zip everything for increased performance
          zip -r docs.zip docs

      - name: Upload docs
        if: always() && steps.copy.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: docs.zip

  build-docs-pdf:
    runs-on: ubuntu-latest
    container: ghcr.io/sagemath/sage/sage-${{ github.event.inputs.platform || 'ubuntu-focal-standard' }}-with-targets:${{ github.event.inputs.docker_tag || 'dev'}}
    needs: [get_ci_fixes]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update system packages
        run: |
          export PATH="build/bin:$PATH"
          eval $(sage-print-system-package-command auto update)
          eval $(sage-print-system-package-command auto --yes --no-install-recommends install zip)
          eval $(sage-print-system-package-command auto --spkg --yes --no-install-recommends install git texlive)


      - name: Add prebuilt tree as a worktree
        id: worktree
        run: |
          git config --global user.email "ci-sage@example.com"
          git config --global user.name "Build & Test workflow"
          git config --global --add safe.directory $(pwd)
          .ci/retrofit-worktree.sh worktree-image /sage
          # Keep track of changes to built HTML
          new_version=$(cat src/VERSION.txt); (cd /sage/local/share/doc/sage/html/en && find . -name "*.html" | xargs sed -i '/class="sidebar-brand-text"/s/Sage [0-9a-z.]* /Sage '$new_version' /'; git init && (echo "*.svg binary"; echo "*.pdf binary") >> .gitattributes && (echo ".buildinfo"; echo '*.inv'; echo '.git*'; echo '*.svg'; echo '*.pdf'; echo '*.png'; echo 'searchindex.js') > .gitignore; git add -A && git commit --quiet -m "old")

      - name: Download upstream artifact
        uses: actions/download-artifact@v3
        with:
          path: upstream
          name: upstream

      - name: Apply CI fixes from sagemath/sage
        # After applying the fixes, make sure all changes are marked as uncommitted changes.
        run: |
          if [ -r upstream/ci_fixes.patch ]; then
            (cd worktree-image && git commit -q -m "current changes" --allow-empty -a && git am; git reset --quiet old; git add -N .) < upstream/ci_fixes.patch
          fi

      - name: Incremental build
        id: incremental
        run: |
          # Now re-bootstrap and build. The build is incremental because we were careful with the timestamps.
          ./bootstrap && make build
        working-directory: ./worktree-image
        env:
          MAKE: make -j2
          SAGE_NUM_THREADS: 2

      - name: Build (fallback to non-incremental)
        id: build
        if: always() && steps.worktree.outcome == 'success' && steps.incremental.outcome != 'success'
        run: |
          set -ex
          make doc-clean doc-uninstall sagelib-clean && git clean -fx src/sage && ./config.status && make build
        working-directory: ./worktree-image
        env:
          MAKE: make -j2
          SAGE_NUM_THREADS: 2

      - name: Build docs (PDF)
        id: docbuild
        if: always() && (steps.incremental.outcome == 'success' || steps.build.outcome == 'success')
        run: make build V=0 && make doc-pdf
        working-directory: ./worktree-image
        env:
          MAKE: make -j2
          SAGE_NUM_THREADS: 2

      - name: Copy docs
        if: always() && steps.docbuild.outcome == 'success'
        run: |
          # For some reason the deploy step below cannot find /sage/...
          # So copy everything from there to local folder
          mkdir -p ./docs
          cp -r -L /sage/local/share/doc/sage/pdf/en/* ./docs
          # Zip everything for increased performance
          zip -r docs-pdf.zip docs

      - name: Upload docs
        if: always() && steps.copy.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: docs-pdf
          path: docs-pdf.zip
