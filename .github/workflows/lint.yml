name: Lint

on: 
  push:
    branches:
      - master
      - develop
  pull_request: 
  merge_group:

concurrency:
  # Cancel previous runs of this workflow for the same branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Merge CI fixes from sagemath/sage
      run: |
        .ci/merge-fixes.sh
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      id: deps
      run: pip install tox

    # Manually register problem matcher as long as https://github.com/ChartBoost/ruff-action/issues/7 is not implemented
    - name: Register problem matcher
      run: echo "::add-matcher::$(pwd)/.github/workflows/ruff-problem-matcher.json"

    - name: Code style check with ruff
      uses: chartboost/ruff-action@v1
      with:
          # Ignore the following code style checks (currently failing):
          # 3617    I001    [*] Import block is un-sorted or un-formatted
          # 3554    PLR2004 [ ] Magic value used in comparison, consider replacing -0.5 with a constant variable
          # 2065    F401    [*] `.PyPolyBoRi.Monomial` imported but unused
          # 1939    E741    [ ] Ambiguous variable name: `I`
          # 1635    F821    [ ] Undefined name `AA`
          # 1500    PLR0912 [ ] Too many branches (102 > 12)
          # 1156    PLR0913 [ ] Too many arguments to function call (10 > 5)
          # 865    E402    [ ] Module level import not at top of file
          # 660    PLR0915 [ ] Too many statements (100 > 50)
          # 471    PLW2901 [ ] Outer `for` loop variable `ext` overwritten by inner `for` loop target
          # 432    PLR5501 [ ] Use `elif` instead of `else` then `if`, to reduce indentation
          # 423    PLR0911 [ ] Too many return statements (10 > 6)
          # 354    E731    [*] Do not assign a `lambda` expression, use a `def`
          # 351    F405    [ ] `ComplexField` may be undefined, or defined from star imports
          # 300    PLR1714 [*] Consider merging multiple comparisons. Use a `set` if the elements are hashable.
          # 240    F403    [ ] `from .abelian_gps.all import *` used; unable to detect undefined names
          # 125    PLR0402 [*] Use `from matplotlib import cm` in lieu of alias
          # 111    PLW0603 [ ] Using the global statement to update `AA_0` is discouraged
          #   90    E713    [*] Test for membership should be `not in`
          #   69    F841    [*] Local variable `B` is assigned to but never used
          #   48    PLW0602 [ ] Using global for `D` but no assignment is done
          #   44    E714    [*] Test for object identity should be `is not`
          #   35    PLR1711 [*] Useless `return` statement at end of function
          #   19    PLR1701 [*] Merge `isinstance` calls
          #   17    PLW3301 [ ] Nested `max` calls can be flattened
          #   15    E721    [ ] Do not compare types, use `isinstance()`
          #   15    PLW1510 [ ] `subprocess.run` without explicit `check` argument
          #   14    F811    [ ] Redefinition of unused `CompleteDiscreteValuationRings` from line 44
          #   14    PLW0120 [ ] `else` clause on loop without a `break` statement; remove the `else` and de-indent all the code inside it
          #   8    PLC0414 [*] Import alias does not rename original package
          #   7    E743    [ ] Ambiguous function name: `I`
          #   7    F541    [*] f-string without any placeholders
          #   7    PLE0101 [ ] Explicit return in `__init__`
          #   7    PLR0124 [ ] Name compared with itself, consider replacing `a == a`
          #   5    PLW0127 [ ] Self-assignment of variable `a`
          #   4    PLW1508 [ ] Invalid type for environment variable default; expected `str` or `None`
          #   3    PLC3002 [ ] Lambda expression called directly. Execute the expression inline instead.
          #   2    E742    [ ] Ambiguous class name: `I`
          #   2    PLE0302 [ ] The special method `__len__` expects 1 parameter, 3 were given
          #   1    E701    [ ] Multiple statements on one line (colon)
          #   1    F402    [ ] Import `factor` from line 259 shadowed by loop variable
          #   1    F823    [ ] Local variable `zero` referenced before assignment
          #   1    PLC0208 [*] Use a sequence type instead of a `set` when iterating over values
          #   1    PLW0129 [ ] Asserting on a non-empty string literal will always pass
          args: --ignore I001,PLR2004,F401,E741,F821,PLR0912,PLR0913,E402,PLR0915,PLW2901,PLR5501,PLR0911,E731,F405,PLR1714,F403,PLR0402,PLW0603,E713,F841,PLW0602,E714,PLR1711,PLR1701,PLW3301,E721,PLW1510,F811,PLW0120,PLC0414,E743,F541,PLE0101,PLR0124,PLW0127,PLW1508,PLC3002,E742,PLE0302,E701,F402,F823,PLC0208,PLW0129,E902

    - name: Code style check with relint
      if: always() && steps.deps.outcome == 'success'
      run: tox -e relint -- src/sage/

    - name: Validate docstring markup as RST
      if: always() && steps.deps.outcome == 'success'
      run: tox -e rst
